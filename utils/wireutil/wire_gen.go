// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wireutil

import (
	"github.com/jackie8tao/ezjob/pkg/cluster"
	"github.com/jackie8tao/ezjob/pkg/dispatcher"
	"github.com/jackie8tao/ezjob/pkg/event"
	"github.com/jackie8tao/ezjob/pkg/extcron"
	"github.com/jackie8tao/ezjob/pkg/server"
	"github.com/jackie8tao/ezjob/pkg/watcher"
	"github.com/jackie8tao/ezjob/proto"
)

// Injectors from wire.go:

func NodeProvider(cfg *proto.AppConfig) *cluster.Node {
	etcdConfig := newEtcdCfg(cfg)
	client := newEtcdCli(etcdConfig)
	manager := event.NewManager()
	node := cluster.NewNode(client, manager)
	return node
}

func WatcherProvider(cfg *proto.AppConfig) *watcher.Watcher {
	etcdConfig := newEtcdCfg(cfg)
	client := newEtcdCli(etcdConfig)
	manager := event.NewManager()
	watcherWatcher := watcher.NewWatcher(client, manager)
	return watcherWatcher
}

func GrpcServerProvider(cfg *proto.AppConfig) *server.GrpcServer {
	grpcConfig := newGrpcCfg(cfg)
	etcdConfig := newEtcdCfg(cfg)
	client := newEtcdCli(etcdConfig)
	mysqlConfig := newMysqlCfg(cfg)
	db := newGormDB(mysqlConfig)
	grpcServer := server.NewGrpcServer(grpcConfig, client, db)
	return grpcServer
}

func HttpServerProvider(cfg *proto.AppConfig) *server.HttpServer {
	httpConfig := newHttpCfg(cfg)
	httpServer := server.NewHttpServer(httpConfig)
	return httpServer
}

func SchedProvider(cfg *proto.AppConfig) *extcron.Scheduler {
	etcdConfig := newEtcdCfg(cfg)
	client := newEtcdCli(etcdConfig)
	manager := event.NewManager()
	mysqlConfig := newMysqlCfg(cfg)
	db := newGormDB(mysqlConfig)
	scheduler := extcron.NewScheduler(client, manager, db)
	return scheduler
}

func DispatcherProvider(cfg *proto.AppConfig) *dispatcher.Dispatcher {
	dispatcherConfig := newDispatcherCfg(cfg)
	etcdConfig := newEtcdCfg(cfg)
	client := newEtcdCli(etcdConfig)
	manager := event.NewManager()
	mysqlConfig := newMysqlCfg(cfg)
	db := newGormDB(mysqlConfig)
	dispatcherDispatcher := dispatcher.NewDispatcher(dispatcherConfig, client, manager, db)
	return dispatcherDispatcher
}

func SentryProvider(cfg *proto.AppConfig) *extcron.Sentry {
	etcdConfig := newEtcdCfg(cfg)
	client := newEtcdCli(etcdConfig)
	mysqlConfig := newMysqlCfg(cfg)
	db := newGormDB(mysqlConfig)
	manager := event.NewManager()
	sentry := extcron.NewSentry(client, db, manager)
	return sentry
}
