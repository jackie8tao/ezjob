// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LogConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogConfigMultiError, or nil
// if none found.
func (m *LogConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *LogConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Level

	if len(errors) > 0 {
		return LogConfigMultiError(errors)
	}

	return nil
}

// LogConfigMultiError is an error wrapping multiple validation errors returned
// by LogConfig.ValidateAll() if the designated constraints aren't met.
type LogConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogConfigMultiError) AllErrors() []error { return m }

// LogConfigValidationError is the validation error returned by
// LogConfig.Validate if the designated constraints aren't met.
type LogConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogConfigValidationError) ErrorName() string { return "LogConfigValidationError" }

// Error satisfies the builtin error interface
func (e LogConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogConfigValidationError{}

// Validate checks the field values on EtcdConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EtcdConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EtcdConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EtcdConfigMultiError, or
// nil if none found.
func (m *EtcdConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *EtcdConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Password

	if len(errors) > 0 {
		return EtcdConfigMultiError(errors)
	}

	return nil
}

// EtcdConfigMultiError is an error wrapping multiple validation errors
// returned by EtcdConfig.ValidateAll() if the designated constraints aren't met.
type EtcdConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EtcdConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EtcdConfigMultiError) AllErrors() []error { return m }

// EtcdConfigValidationError is the validation error returned by
// EtcdConfig.Validate if the designated constraints aren't met.
type EtcdConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EtcdConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EtcdConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EtcdConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EtcdConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EtcdConfigValidationError) ErrorName() string { return "EtcdConfigValidationError" }

// Error satisfies the builtin error interface
func (e EtcdConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEtcdConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EtcdConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EtcdConfigValidationError{}

// Validate checks the field values on MysqlConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MysqlConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MysqlConfigMultiError, or
// nil if none found.
func (m *MysqlConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addr

	// no validation rules for User

	// no validation rules for Password

	// no validation rules for Db

	if len(errors) > 0 {
		return MysqlConfigMultiError(errors)
	}

	return nil
}

// MysqlConfigMultiError is an error wrapping multiple validation errors
// returned by MysqlConfig.ValidateAll() if the designated constraints aren't met.
type MysqlConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlConfigMultiError) AllErrors() []error { return m }

// MysqlConfigValidationError is the validation error returned by
// MysqlConfig.Validate if the designated constraints aren't met.
type MysqlConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlConfigValidationError) ErrorName() string { return "MysqlConfigValidationError" }

// Error satisfies the builtin error interface
func (e MysqlConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlConfigValidationError{}

// Validate checks the field values on HttpConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HttpConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HttpConfigMultiError, or
// nil if none found.
func (m *HttpConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addr

	// no validation rules for Upstream

	if len(errors) > 0 {
		return HttpConfigMultiError(errors)
	}

	return nil
}

// HttpConfigMultiError is an error wrapping multiple validation errors
// returned by HttpConfig.ValidateAll() if the designated constraints aren't met.
type HttpConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpConfigMultiError) AllErrors() []error { return m }

// HttpConfigValidationError is the validation error returned by
// HttpConfig.Validate if the designated constraints aren't met.
type HttpConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpConfigValidationError) ErrorName() string { return "HttpConfigValidationError" }

// Error satisfies the builtin error interface
func (e HttpConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpConfigValidationError{}

// Validate checks the field values on GrpcConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrpcConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrpcConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrpcConfigMultiError, or
// nil if none found.
func (m *GrpcConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *GrpcConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addr

	if len(errors) > 0 {
		return GrpcConfigMultiError(errors)
	}

	return nil
}

// GrpcConfigMultiError is an error wrapping multiple validation errors
// returned by GrpcConfig.ValidateAll() if the designated constraints aren't met.
type GrpcConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrpcConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrpcConfigMultiError) AllErrors() []error { return m }

// GrpcConfigValidationError is the validation error returned by
// GrpcConfig.Validate if the designated constraints aren't met.
type GrpcConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrpcConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrpcConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrpcConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrpcConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrpcConfigValidationError) ErrorName() string { return "GrpcConfigValidationError" }

// Error satisfies the builtin error interface
func (e GrpcConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrpcConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrpcConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrpcConfigValidationError{}

// Validate checks the field values on SrvConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SrvConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SrvConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SrvConfigMultiError, or nil
// if none found.
func (m *SrvConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SrvConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGrpcCfg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SrvConfigValidationError{
					field:  "GrpcCfg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SrvConfigValidationError{
					field:  "GrpcCfg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpcCfg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SrvConfigValidationError{
				field:  "GrpcCfg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHttpCfg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SrvConfigValidationError{
					field:  "HttpCfg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SrvConfigValidationError{
					field:  "HttpCfg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpCfg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SrvConfigValidationError{
				field:  "HttpCfg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SrvConfigMultiError(errors)
	}

	return nil
}

// SrvConfigMultiError is an error wrapping multiple validation errors returned
// by SrvConfig.ValidateAll() if the designated constraints aren't met.
type SrvConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SrvConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SrvConfigMultiError) AllErrors() []error { return m }

// SrvConfigValidationError is the validation error returned by
// SrvConfig.Validate if the designated constraints aren't met.
type SrvConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SrvConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SrvConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SrvConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SrvConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SrvConfigValidationError) ErrorName() string { return "SrvConfigValidationError" }

// Error satisfies the builtin error interface
func (e SrvConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSrvConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SrvConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SrvConfigValidationError{}

// Validate checks the field values on DispatcherConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DispatcherConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DispatcherConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DispatcherConfigMultiError, or nil if none found.
func (m *DispatcherConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DispatcherConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return DispatcherConfigMultiError(errors)
	}

	return nil
}

// DispatcherConfigMultiError is an error wrapping multiple validation errors
// returned by DispatcherConfig.ValidateAll() if the designated constraints
// aren't met.
type DispatcherConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DispatcherConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DispatcherConfigMultiError) AllErrors() []error { return m }

// DispatcherConfigValidationError is the validation error returned by
// DispatcherConfig.Validate if the designated constraints aren't met.
type DispatcherConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatcherConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatcherConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatcherConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatcherConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatcherConfigValidationError) ErrorName() string { return "DispatcherConfigValidationError" }

// Error satisfies the builtin error interface
func (e DispatcherConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatcherConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatcherConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatcherConfigValidationError{}

// Validate checks the field values on AlarmConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AlarmConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlarmConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AlarmConfigMultiError, or
// nil if none found.
func (m *AlarmConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AlarmConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServerAddr

	// no validation rules for Sender

	if len(errors) > 0 {
		return AlarmConfigMultiError(errors)
	}

	return nil
}

// AlarmConfigMultiError is an error wrapping multiple validation errors
// returned by AlarmConfig.ValidateAll() if the designated constraints aren't met.
type AlarmConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmConfigMultiError) AllErrors() []error { return m }

// AlarmConfigValidationError is the validation error returned by
// AlarmConfig.Validate if the designated constraints aren't met.
type AlarmConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmConfigValidationError) ErrorName() string { return "AlarmConfigValidationError" }

// Error satisfies the builtin error interface
func (e AlarmConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarmConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmConfigValidationError{}

// Validate checks the field values on AppConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppConfigMultiError, or nil
// if none found.
func (m *AppConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AppConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Log",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEtcd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Etcd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Etcd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtcd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Etcd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSrv()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Srv",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Srv",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSrv()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Srv",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDispatcher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Dispatcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Dispatcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDispatcher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Dispatcher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMysql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Mysql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAlarm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Alarm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppConfigMultiError(errors)
	}

	return nil
}

// AppConfigMultiError is an error wrapping multiple validation errors returned
// by AppConfig.ValidateAll() if the designated constraints aren't met.
type AppConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppConfigMultiError) AllErrors() []error { return m }

// AppConfigValidationError is the validation error returned by
// AppConfig.Validate if the designated constraints aren't met.
type AppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppConfigValidationError) ErrorName() string { return "AppConfigValidationError" }

// Error satisfies the builtin error interface
func (e AppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppConfigValidationError{}
