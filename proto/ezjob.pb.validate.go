// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ezjob.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Proc with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Proc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Proc with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProcMultiError, or nil if none found.
func (m *Proc) ValidateAll() error {
	return m.validate(true)
}

func (m *Proc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetHttpProc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcValidationError{
					field:  "HttpProc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcValidationError{
					field:  "HttpProc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpProc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcValidationError{
				field:  "HttpProc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcMultiError(errors)
	}

	return nil
}

// ProcMultiError is an error wrapping multiple validation errors returned by
// Proc.ValidateAll() if the designated constraints aren't met.
type ProcMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcMultiError) AllErrors() []error { return m }

// ProcValidationError is the validation error returned by Proc.Validate if the
// designated constraints aren't met.
type ProcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcValidationError) ErrorName() string { return "ProcValidationError" }

// Error satisfies the builtin error interface
func (e ProcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcValidationError{}

// Validate checks the field values on HttpProc with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HttpProc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpProc with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HttpProcMultiError, or nil
// if none found.
func (m *HttpProc) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpProc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Payload

	if len(errors) > 0 {
		return HttpProcMultiError(errors)
	}

	return nil
}

// HttpProcMultiError is an error wrapping multiple validation errors returned
// by HttpProc.ValidateAll() if the designated constraints aren't met.
type HttpProcMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpProcMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpProcMultiError) AllErrors() []error { return m }

// HttpProcValidationError is the validation error returned by
// HttpProc.Validate if the designated constraints aren't met.
type HttpProcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpProcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpProcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpProcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpProcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpProcValidationError) ErrorName() string { return "HttpProcValidationError" }

// Error satisfies the builtin error interface
func (e HttpProcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpProc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpProcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpProcValidationError{}

// Validate checks the field values on ProcPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProcPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProcPayloadMultiError, or
// nil if none found.
func (m *ProcPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcPayloadValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcPayloadValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcPayloadValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcPayloadMultiError(errors)
	}

	return nil
}

// ProcPayloadMultiError is an error wrapping multiple validation errors
// returned by ProcPayload.ValidateAll() if the designated constraints aren't met.
type ProcPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcPayloadMultiError) AllErrors() []error { return m }

// ProcPayloadValidationError is the validation error returned by
// ProcPayload.Validate if the designated constraints aren't met.
type ProcPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcPayloadValidationError) ErrorName() string { return "ProcPayloadValidationError" }

// Error satisfies the builtin error interface
func (e ProcPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcPayloadValidationError{}

// Validate checks the field values on HttpProcPayload with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HttpProcPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpProcPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HttpProcPayloadMultiError, or nil if none found.
func (m *HttpProcPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpProcPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskName

	// no validation rules for ExecutionId

	// no validation rules for Payload

	if len(errors) > 0 {
		return HttpProcPayloadMultiError(errors)
	}

	return nil
}

// HttpProcPayloadMultiError is an error wrapping multiple validation errors
// returned by HttpProcPayload.ValidateAll() if the designated constraints
// aren't met.
type HttpProcPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpProcPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpProcPayloadMultiError) AllErrors() []error { return m }

// HttpProcPayloadValidationError is the validation error returned by
// HttpProcPayload.Validate if the designated constraints aren't met.
type HttpProcPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpProcPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpProcPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpProcPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpProcPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpProcPayloadValidationError) ErrorName() string { return "HttpProcPayloadValidationError" }

// Error satisfies the builtin error interface
func (e HttpProcPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpProcPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpProcPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpProcPayloadValidationError{}

// Validate checks the field values on Job with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Job) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Job with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobMultiError, or nil if none found.
func (m *Job) ValidateAll() error {
	return m.validate(true)
}

func (m *Job) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 32 {
		err := JobValidationError{
			field:  "Name",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Job_Name_Pattern.MatchString(m.GetName()) {
		err := JobValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSchedule()) < 1 {
		err := JobValidationError{
			field:  "Schedule",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetOwners()) < 1 {
		err := JobValidationError{
			field:  "Owners",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_Job_Owners_Unique := make(map[string]struct{}, len(m.GetOwners()))

	for idx, item := range m.GetOwners() {
		_, _ = idx, item

		if _, exists := _Job_Owners_Unique[item]; exists {
			err := JobValidationError{
				field:  fmt.Sprintf("Owners[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Job_Owners_Unique[item] = struct{}{}
		}

		// no validation rules for Owners[idx]
	}

	if _, ok := _Job_Mode_InLookup[m.GetMode()]; !ok {
		err := JobValidationError{
			field:  "Mode",
			reason: "value must be in list [single multi]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "Proc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "Proc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "Proc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobMultiError(errors)
	}

	return nil
}

// JobMultiError is an error wrapping multiple validation errors returned by
// Job.ValidateAll() if the designated constraints aren't met.
type JobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobMultiError) AllErrors() []error { return m }

// JobValidationError is the validation error returned by Job.Validate if the
// designated constraints aren't met.
type JobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobValidationError) ErrorName() string { return "JobValidationError" }

// Error satisfies the builtin error interface
func (e JobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobValidationError{}

var _Job_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _Job_Mode_InLookup = map[string]struct{}{
	"single": {},
	"multi":  {},
}

// Validate checks the field values on ListJobReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListJobReqMultiError, or
// nil if none found.
func (m *ListJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 32 {
		err := ListJobReqValidationError{
			field:  "Name",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListJobReq_Name_Pattern.MatchString(m.GetName()) {
		err := ListJobReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListJobReqMultiError(errors)
	}

	return nil
}

// ListJobReqMultiError is an error wrapping multiple validation errors
// returned by ListJobReq.ValidateAll() if the designated constraints aren't met.
type ListJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListJobReqMultiError) AllErrors() []error { return m }

// ListJobReqValidationError is the validation error returned by
// ListJobReq.Validate if the designated constraints aren't met.
type ListJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJobReqValidationError) ErrorName() string { return "ListJobReqValidationError" }

// Error satisfies the builtin error interface
func (e ListJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJobReqValidationError{}

var _ListJobReq_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

// Validate checks the field values on ListJobRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListJobRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListJobRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListJobRspMultiError, or
// nil if none found.
func (m *ListJobRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListJobRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListJobRspValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListJobRspValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListJobRspValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListJobRspMultiError(errors)
	}

	return nil
}

// ListJobRspMultiError is an error wrapping multiple validation errors
// returned by ListJobRsp.ValidateAll() if the designated constraints aren't met.
type ListJobRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListJobRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListJobRspMultiError) AllErrors() []error { return m }

// ListJobRspValidationError is the validation error returned by
// ListJobRsp.Validate if the designated constraints aren't met.
type ListJobRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJobRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJobRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJobRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJobRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJobRspValidationError) ErrorName() string { return "ListJobRspValidationError" }

// Error satisfies the builtin error interface
func (e ListJobRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJobRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJobRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJobRspValidationError{}

// Validate checks the field values on DelJobReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelJobReqMultiError, or nil
// if none found.
func (m *DelJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := DelJobReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DelJobReq_Name_Pattern.MatchString(m.GetName()) {
		err := DelJobReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelJobReqMultiError(errors)
	}

	return nil
}

// DelJobReqMultiError is an error wrapping multiple validation errors returned
// by DelJobReq.ValidateAll() if the designated constraints aren't met.
type DelJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelJobReqMultiError) AllErrors() []error { return m }

// DelJobReqValidationError is the validation error returned by
// DelJobReq.Validate if the designated constraints aren't met.
type DelJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelJobReqValidationError) ErrorName() string { return "DelJobReqValidationError" }

// Error satisfies the builtin error interface
func (e DelJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelJobReqValidationError{}

var _DelJobReq_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

// Validate checks the field values on RunJobReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunJobReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunJobReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunJobReqMultiError, or nil
// if none found.
func (m *RunJobReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RunJobReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 32 {
		err := RunJobReqValidationError{
			field:  "Name",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RunJobReq_Name_Pattern.MatchString(m.GetName()) {
		err := RunJobReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Payload

	if len(errors) > 0 {
		return RunJobReqMultiError(errors)
	}

	return nil
}

// RunJobReqMultiError is an error wrapping multiple validation errors returned
// by RunJobReq.ValidateAll() if the designated constraints aren't met.
type RunJobReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunJobReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunJobReqMultiError) AllErrors() []error { return m }

// RunJobReqValidationError is the validation error returned by
// RunJobReq.Validate if the designated constraints aren't met.
type RunJobReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunJobReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunJobReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunJobReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunJobReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunJobReqValidationError) ErrorName() string { return "RunJobReqValidationError" }

// Error satisfies the builtin error interface
func (e RunJobReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunJobReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunJobReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunJobReqValidationError{}

var _RunJobReq_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

// Validate checks the field values on ReportReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportReqMultiError, or nil
// if none found.
func (m *ReportReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJobName()) > 32 {
		err := ReportReqValidationError{
			field:  "JobName",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReportReq_JobName_Pattern.MatchString(m.GetJobName()) {
		err := ReportReqValidationError{
			field:  "JobName",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ReportReq_Status_InLookup[m.GetStatus()]; !ok {
		err := ReportReqValidationError{
			field:  "Status",
			reason: "value must be in list [succ fail]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLog()) > 1024 {
		err := ReportReqValidationError{
			field:  "Log",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExecutionId() <= 0 {
		err := ReportReqValidationError{
			field:  "ExecutionId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportReqMultiError(errors)
	}

	return nil
}

// ReportReqMultiError is an error wrapping multiple validation errors returned
// by ReportReq.ValidateAll() if the designated constraints aren't met.
type ReportReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportReqMultiError) AllErrors() []error { return m }

// ReportReqValidationError is the validation error returned by
// ReportReq.Validate if the designated constraints aren't met.
type ReportReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportReqValidationError) ErrorName() string { return "ReportReqValidationError" }

// Error satisfies the builtin error interface
func (e ReportReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportReqValidationError{}

var _ReportReq_JobName_Pattern = regexp.MustCompile("^[a-zA-Z0-9]+$")

var _ReportReq_Status_InLookup = map[string]struct{}{
	"succ": {},
	"fail": {},
}
