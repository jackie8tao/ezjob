// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ezjob.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EzJobClient is the client API for EzJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EzJobClient interface {
	CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListJob(ctx context.Context, in *ListJobReq, opts ...grpc.CallOption) (*ListJobRsp, error)
	DelJob(ctx context.Context, in *DelJobReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunJob(ctx context.Context, in *RunJobReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ezJobClient struct {
	cc grpc.ClientConnInterface
}

func NewEzJobClient(cc grpc.ClientConnInterface) EzJobClient {
	return &ezJobClient{cc}
}

func (c *ezJobClient) CreateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EzJob/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezJobClient) ListJob(ctx context.Context, in *ListJobReq, opts ...grpc.CallOption) (*ListJobRsp, error) {
	out := new(ListJobRsp)
	err := c.cc.Invoke(ctx, "/proto.EzJob/ListJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezJobClient) DelJob(ctx context.Context, in *DelJobReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EzJob/DelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezJobClient) RunJob(ctx context.Context, in *RunJobReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EzJob/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezJobClient) Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.EzJob/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EzJobServer is the server API for EzJob service.
// All implementations must embed UnimplementedEzJobServer
// for forward compatibility
type EzJobServer interface {
	CreateJob(context.Context, *Job) (*emptypb.Empty, error)
	ListJob(context.Context, *ListJobReq) (*ListJobRsp, error)
	DelJob(context.Context, *DelJobReq) (*emptypb.Empty, error)
	RunJob(context.Context, *RunJobReq) (*emptypb.Empty, error)
	Report(context.Context, *ReportReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedEzJobServer()
}

// UnimplementedEzJobServer must be embedded to have forward compatible implementations.
type UnimplementedEzJobServer struct {
}

func (UnimplementedEzJobServer) CreateJob(context.Context, *Job) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedEzJobServer) ListJob(context.Context, *ListJobReq) (*ListJobRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (UnimplementedEzJobServer) DelJob(context.Context, *DelJobReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelJob not implemented")
}
func (UnimplementedEzJobServer) RunJob(context.Context, *RunJobReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedEzJobServer) Report(context.Context, *ReportReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedEzJobServer) mustEmbedUnimplementedEzJobServer() {}

// UnsafeEzJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EzJobServer will
// result in compilation errors.
type UnsafeEzJobServer interface {
	mustEmbedUnimplementedEzJobServer()
}

func RegisterEzJobServer(s grpc.ServiceRegistrar, srv EzJobServer) {
	s.RegisterService(&EzJob_ServiceDesc, srv)
}

func _EzJob_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzJobServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EzJob/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzJobServer).CreateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzJob_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzJobServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EzJob/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzJobServer).ListJob(ctx, req.(*ListJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzJob_DelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzJobServer).DelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EzJob/DelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzJobServer).DelJob(ctx, req.(*DelJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzJob_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzJobServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EzJob/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzJobServer).RunJob(ctx, req.(*RunJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzJob_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzJobServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EzJob/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzJobServer).Report(ctx, req.(*ReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EzJob_ServiceDesc is the grpc.ServiceDesc for EzJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EzJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EzJob",
	HandlerType: (*EzJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _EzJob_CreateJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _EzJob_ListJob_Handler,
		},
		{
			MethodName: "DelJob",
			Handler:    _EzJob_DelJob_Handler,
		},
		{
			MethodName: "RunJob",
			Handler:    _EzJob_RunJob_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _EzJob_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ezjob.proto",
}
