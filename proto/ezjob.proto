syntax = "proto3";
package proto;
option go_package = "github.com/jackie8tao/ezjob/proto";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

message Job {
  string name = 1 [(validate.rules).string = {
    pattern: "^[a-zA-Z0-9]+$",
    max_len: 32
  }];

  string schedule = 2 [(validate.rules).string.min_len = 1];
  repeated string owners = 3 [(validate.rules).repeated = {
    min_items: 1,
    unique: true
  }];

  string mode = 4 [(validate.rules).string = {
    in: ["single", "multi"]
  }];

  Proc proc = 5;
}

enum ProcType {
  HTTP = 0;
  Kafka = 1;
}

message Proc {
  ProcType type = 1;
  HttpProc http_proc = 2;
}

message HttpProc {
  string url = 1;
  string payload = 2;
}

message ProcPayload {
  ProcType type = 1;
  HttpProcPayload http = 2;
}

message HttpProcPayload {
  string task_name = 1;
  int32 execution_id = 2;
  string payload = 3;
}

message ListJobReq {
  string name = 1 [(validate.rules).string = {
    pattern: "^[a-zA-Z0-9]+$",
    max_len: 32
  }];
}

message ListJobRsp {
  repeated Job tasks = 1;
}

message DelJobReq {
  string name = 1 [(validate.rules).string = {
    pattern: "^[a-zA-Z0-9]+$",
    max_len: 32,
    min_len: 1,
  }];
}

message RunJobReq {
  string name = 1 [(validate.rules).string = {
    pattern: "^[a-zA-Z0-9]+$",
    max_len: 32
  }];
  string payload = 2;
}

message ReportReq {
  string job_name = 1 [(validate.rules).string = {
    pattern: "^[a-zA-Z0-9]+$",
    max_len: 32
  }];

  string status = 2 [(validate.rules).string = {
    in: ["succ", "fail"]
  }];
  string log = 3 [(validate.rules).string.max_len = 1024];
  int32 execution_id = 4 [(validate.rules).int32.gt = 0];
}

service EzJob {
  rpc CreateJob (Job) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/job",
      body: "*"
    };
  };

  rpc ListJob(ListJobReq) returns (ListJobRsp) {
    option (google.api.http) = {
      get: "/api/jobs"
    };
  };

  rpc DelJob(DelJobReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/job",
    };
  };

  rpc RunJob (RunJobReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/job/trigger",
      body: "*"
    };
  };

  rpc Report (ReportReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/job/report",
      body: "*",
    };
  };
}